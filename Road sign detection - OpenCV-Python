#opencv 2.4.13

import cv2
import numpy as np
MIN_MATCH_COUNT=29
##import serial
import urllib
import socket
##import serial
cnt=10
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)


url="http://192.168.1.17:8080/shot.jpg"
lt=1;
gt=1;
detector=cv2.xfeatures2d.SIFT_create()


FLANN_INDEX_KDITREE=0
flannParam=dict(algorithm=FLANN_INDEX_KDITREE,tree=5)
flann=cv2.FlannBasedMatcher(flannParam,{})

trainImg1=cv2.imread("3.jpg",0)
trainImg2=cv2.imread("5.jpg",0)

trainKP1,trainDesc1=detector.detectAndCompute(trainImg1,None)
trainKP2,trainDesc2=detector.detectAndCompute(trainImg2,None)

##cam=cv2.VideoCapture(0)
try:
    while True:
        print ("IN")
        imgPath=urllib.urlopen(url)
        imgNp=np.array(bytearray(imgPath.read()),dtype=np.uint8)
        img=cv2.imdecode(imgNp,-1)
        cv2.imshow("frame",img)
        QueryImgBGR=img
##        r,QueryImgBGR=cam.read()
        QueryImg=cv2.cvtColor(QueryImgBGR,cv2.COLOR_BGR2GRAY)
        queryKP,queryDesc=detector.detectAndCompute(QueryImg,None)
        matches1=flann.knnMatch(queryDesc,trainDesc1,k=2)
        matches2=flann.knnMatch(queryDesc,trainDesc2,k=2)


        
        for i in range(1,3):
            if i==1:
                matches=matches1;
                trainKP=trainKP1;
                trainDesc=trainDesc1;
            elif i==2:
                matches=matches2;
                trainKP=trainKP2;
                trainDesc=trainDesc2;
            else:
                matches=matches3;
                trainKP=trainKP3;
                trainDesc=trainDesc3;

            goodMatch=[]
            for m,n in matches:
                if(m.distance<0.75*n.distance):
                    goodMatch.append(m)
            print (len(goodMatch))
            if(len(goodMatch)>MIN_MATCH_COUNT):
                tp=[]
                qp=[]
                for m in goodMatch:
                    tp.append(trainKP[m.trainIdx].pt)
                    qp.append(queryKP[m.queryIdx].pt)
                tp,qp=np.float32((tp,qp))
                H,status=cv2.findHomography(tp,qp,cv2.RANSAC,3.0)
                h,w=trainImg1.shape
                trainBorder=np.float32([[[0,0],[0,h-1],[w-1,h-1],[w-1,0]]])
                queryBorder=cv2.perspectiveTransform(trainBorder,H)
                if i==1: 
                    print('#############  ZEBRA CROSSING  ############')
                    cv2.putText(QueryImgBGR, "ZEBRA CROSSING", (10, 30),cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
          
                    sock.sendto('A', ("192.168.1.35", 8888))

                elif i==2: 
                    print('#############  SCHOOL SIGN  ############')
                    cv2.putText(QueryImgBGR, "SCHOOL SIGN ", (10, 30),cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

                    sock.sendto('B', ("192.168.1.35", 8888))
                else:
                    sock.sendto('0', ("192.168.1.35", 8888))
                    
            else:
                print ("MOVING ON")
                print ("###################")
                
        cv2.imshow('result',QueryImgBGR)
        if cv2.waitKey(10)==ord('q'):
            break
except KeyboardInterrupt:
    cv2.destroyAllWindows()
